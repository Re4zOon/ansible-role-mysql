---
- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  when:
    - mysql_replication_role == 'master'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Check slave replication status.
  become: true
  mysql_replication:
    mode: getslave
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Check master replication status.
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: Configure replication on the slave.
  become: true
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_auto_position: 1
    master_ssl: 1
  ignore_errors: true
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0

- name: "Query mysql master semi-sync plugin"
  mysql_query:
    query: "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE '%semi_sync_master%'"
  register: master_plugin_installed

- name: "Install master semi-sync plugin"
  mysql_query:
    query: "INSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so'"
  when: 
    - master_plugin_installed.rowcount[0] == 0
    - semi_sync_master_enabled == 1

- name: "Query mysql slave semi-sync plugin"
  mysql_query:
    query: "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE '%semi_sync_slave%'"
  register: slave_plugin_installed

- name: "Install slave semi-sync plugin"
  mysql_query:
    query: "INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so'"
  when: 
    - slave_plugin_installed.rowcount[0] == 0
    - semi_sync_master_enabled == 1

- name: Start replication.
  become: true
  mysql_replication: mode=startslave
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']
